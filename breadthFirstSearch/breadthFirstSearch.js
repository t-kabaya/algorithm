// 幅優先探索とは、木構造やグラフの探索を行うためのアルゴリズムです。
// 始点となるノードから隣接するノードを探索し、そこからさらに隣接するノードに対して探索を繰り返して目的のノードを見つけます
// 幅優先探索は全ノードを網羅的に探索して行くため、しらみつぶしに調べていく方法とも言えます。

// 視点から近い順に探索をしていくため、探索するノードはキュー（FIFO）を使って管理することになります。
// 深さ優先探索がスタック（LIFO）を使って管理する点に対して対照的なアルゴリズムです。

// 参考： http://algoful.com/Archive/Algorithm/BFS
// キューを使う事で、
const graph = {}

graph['START'] = ['alice', 'bob', 'claire']
graph['bob'] = ['anuj', 'peggy']
graph['alice'] = ['peggy']
graph['claire'] = ['TARGET', 'jonny']
graph['anuj'] = []
graph['peggy'] = []
graph['thom'] = []
graph['jonny'] = []

const bfs = () => {
  const queue = graph['START']

  while (queue.length) {
    const person = queue.shift()
    console.log(person)

    if (person === 'TARGET') {
      console.log('finish')
      console.log(person)
      return
    } else {
      queue.push(...graph[person])
    }
  }

  console.log('not finish')
}

bfs()


http://algoful.com/Archive/Algorithm/BFSのやりかけ。
// １５✖️１５の迷路の探索アルゴリズムを組んでみる。0が、迷路の道で、[0,0]がスタート[15,15]がゴール
const maze = [
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1,0,0,0,1,0,0,0,0,0,0,0,0,0,1],
  [1,1,1,0,1,1,1,0,1,1,1,0,1,0,1],
  [1,0,1,0,0,0,1,0,0,0,1,0,1,0,1],
  [1,0,1,1,1,0,1,1,1,0,1,0,1,1,1],
  [1,0,1,0,0,0,0,0,0,0,1,0,0,0,1],
  [1,0,1,0,1,1,1,1,1,1,1,1,1,0,1],
  [1,0,0,0,0,0,0,0,1,0,1,0,0,0,1],
  [1,1,1,1,1,0,1,0,1,0,1,0,1,1,1],
  [1,0,0,0,1,0,1,0,0,0,1,0,0,0,1],
  [1,0,1,0,1,0,1,1,1,0,1,1,1,1,1],
  [1,0,1,0,1,0,0,0,1,0,1,0,0,0,1],
  [1,0,1,0,1,1,1,0,1,0,1,0,1,0,1],
  [1,0,1,0,0,0,0,0,1,0,0,0,1,0,1],
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]

const start = [1, 1]
const goal = [15, 15]

// breadFirstSearch幅優先探索
const search = () => {
  let isGoaled = false
  const queue = []
  // 訪問済み配列を-1で初期化
  const visitedArray = [
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
    new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1)
  ]

  while(!isGoaled) {
    // 探索対象のセルを取り出す。
    const target = queue.shift()

    // 対象のセルから、上下左右載せるを探索する。
    for(let i=0;i<4;i++){
      const nextTarget = 
    }
  }
}
